vector<int> pre;
    NumArray(vector<int>& nums) {
        pre.assign(nums.size() + 1, 0);
        for (int i = 0; i < nums.size(); i++) {
            pre[i + 1] = pre[i] + nums[i];
        }

    }
    
    int sumRange(int left, int right) {
        return pre[right + 1] - pre[left];
    }
LAZY RANGE QUERY 
PROBLEMS WITH INTERVALS
for (auto& car : nums){
            line[car[0]]++;
            line[car[1] + 1]--;
        }

line[0] =0;
        for (int i = 1; i < 102; ++i){
            line[i]+=line[i - 1];
        }
        int count = 0;
        for (int i = 1; i <= 100; ++i){ 
            if (line[i] > 0) {
                count++;
            }
        }

Use prefix sum + map to solve maximum length of contiguous subarray