class BIT {
public:
    vector<int> tree;
    int N;

    BIT(int n) : N(n), tree(n+1,0) {}

    void update(int i, int d) { for(;i<=N;i+=i&-i) tree[i]+=d; }

    int sum(int i) {
        int s = 0;
        for(;i>0;i-=i&-i) s+=tree[i];
        return s;
    }

    int query(int l, int r) { return sum(r)-sum(l); }
};

You can never access value 0 on array (it is a dummy node)



FENWICK TREE ON VALUES
for the amount of smaller/greater values previous/following index
int max = 0;
        for (int i = 0; i < nums.size(); i++) if (nums[i] > max) max = nums[i];
        BIT left(max), right(max);

        for (int i = nums.size()-1; i > -1; i--) right.update(nums[i],1);

        int ret = 0;
        for (int i = 0; i < nums.size(); i++) {
            right.update(nums[i],-1);
            if (left.query(0,nums[i]-1) >= k && right.query(0,nums[i]-1) >= k) ret++;
            left.update(nums[i], 1);
        }

        return ret; 

COORDINATE COMPRESSION (all values in fenwick must be positive)
long long sum = 0;
        for (int num : nums) {
            sum += num;
            prefixSums.push_back(sum);
        }

        // Collect all values that need to be compressed
        set<long long> allValues(prefixSums.begin(), prefixSums.end());
        for (long long prefix : prefixSums) {
            allValues.insert(prefix - lower);
            allValues.insert(prefix - upper);
        }

        // Coordinate compression: map each value to an index
        unordered_map<long long, int> compressedIndex;
        int index = 1;
        for (long long value : allValues) {
            compressedIndex[value] = index++;
        }

        // Use Fenwick Tree on compressed indices
        FenwickTree bit(index);
        int count = 0;
        for (long long prefix : prefixSums) {
            // Query BIT: count how many values fall within [prefix - upper, prefix - lower]
            count += bit.query(compressedIndex[prefix - lower]) - bit.query(compressedIndex[prefix - upper] - 1);

            // Update BIT with current prefix sum
            bit.update(compressedIndex[prefix], 1);
        }