The most efficient way to get to a high number is by multiplying it by 3.


Prime numbers of n -> go through all numbers up to sqrt(n) and if 
n % i == 0 it is a factor

FACTORIZATION

void factoriza(unsigned int i) {
 assert(i >= 2); // O comprobaciones especiales
 unsigned int p = 2;
 	while(p*p <= i) { // Better than sqrt
 		while(!(i % p)) {
 			cout << p << ’ ’;
 			i /= p;
 		}
 		++p;
 	}
 if (i != 1) // Last prime
 	cout << i << ’ ’;
}
 

The Sieve of Eratosthenes
prime numbers from 1 - 1000

while (i <= 1000) {
            if (isPrime[i]) {
                for (int j = i+i; j < 1001; j += i) 
                    isPrime[j] = false;
            }  
            i++;    
        }


MATH POW

2^50 = 2^25 times itself
2^25 = 2^12 times itself * 2
2^12 = 2^6 times itself 
...

Pow turns into log2N function

TRIANGLE VALID

A triangle is valid if sum of the length of its two smallest sides is greater than the sum of third side

POLIGON VALID

A poligon is valid  if you have k (k >= 3) positive real numbers a1, a2, a3, ..., ak where a1 <= a2 <= a3 <= ... <= ak and a1 + a2 + a3 + ... + ak-1 > ak, then there always exists a polygon with k sides whose lengths are a1, a2, a3, ..., ak.

SQUARES

for checking squares keep a unordered map with all nodes. When new node added check map for
diagonals that allow for valid square 


BASE

each digit is equal to the value of the digit times the base^(position of the digit)
if (num == 0) return "0";
        
        int aux = abs(num);
        string ret;
        while (aux) {
            ret += '0' + (aux % 7);
            aux /= 7;
        }
        if (num < 0) ret += '-';
        reverse(ret.begin(),ret.end());

replace 7 to any other number to make it work

int aux = abs(num);
        string ret;
        while (aux) {
            int digit = aux % 16;
            if (digit < 10) ret += '0' + digit; else ret += 'a' + digit-10;
            aux /= 16;
        }
        if (num < 0) ret += '-';
        reverse(ret.begin(),ret.end());

this is an example of base 16

this is an example of base 10 -> 7 problem


COMPLEMENT 2

c2 means flipping all bits and adding one.
long long int aux = num < 0 ? (1LL << 32)+num : num;
we can use previous formula for just that, turning number into one much bigger

ACHIEVING NUMBER WITH OPERATIONS

for example getting 25 by only being able to multiply by 2 and add 1 (minimum number of operations)

start at the end and divide whenever possible (even number)
