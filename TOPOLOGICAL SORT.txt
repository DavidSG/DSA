DFS
//FOR THIS ONE DETECT CYCLES BEFORE
void topologicalSort(int v, vector<vector<int>>& adj, vector<bool>& visited, stack<int>& stack) {
        visited[v] = true;

        for (int i : adj[v]) {
            if (!visited[i])
                topologicalSort(i, adj, visited, stack);
        }

        stack.push(v);
    }

BFS (KAHN'S ALGORITHM)

int minimumSemesters(int n, vector<vector<int>>& relations) {
        vector<vector<int>> graph (n);
        vector<int> indegree(n);

        for (int i = 0; i < relations.size(); i++) {
            graph[relations[i][0]-1].push_back(relations[i][1]-1);
            indegree[relations[i][1]-1]++;
        }

        vector<char> color(n,'W');
        if (cycleDetection(0, graph, color)) return -1;
        
        queue<int> q;
        
        // Initialize begin nodes (no receiving edges)
        for (int i = 0; i < n; i++) if (indegree[i] == 0) q.push(i);
        
        // Iterate graph starting with begin nodes (BFS)
        int cont = 0;
        while (!q.empty()) {
            int length = q.size(); cont++;
            for (int i = 0; i < length; i++) {
                int node = q.front(); q.pop();
                for (int adj: graph[node]) {
                    indegree[adj]--;
                    if (indegree[adj] == 0) q.push(adj);
                }
            }
            
        }
        
        return cont;
    }