class SegmentTree {
public:
    vector<int> st; int n;
    SegmentTree(vector<int>& nums) {
        n = nums.size();
        st.resize(4*n+10);
        build(nums,1,0,n-1);
    }

    void build(vector<int>& nums, int p, int l, int r) {
        for (int i = n, j = 0;  i < 2 * n; i++,  j++)
            st[i] = nums[j];
        for (int i = n - 1; i > 0; --i)
            st[i] = st[i * 2] + st[i * 2 + 1];
    }
    
    void update(int pos, int newVal) {
        update(1, 0, n-1, pos, newVal);
    }

    void update(int vertex, int L, int R, int pos, int newVal) {
        if ((pos < L) || (R < pos)) return;
        if (L == R) {
            st[vertex] = newVal;
            return;
        }
        int m = (L+R) / 2;
        if ((L <= pos) && (pos <= m)) update(2 * vertex, L, m, pos, newVal);
        else update(2 * vertex + 1, m+1, R, pos, newVal);
        st[vertex] = st[2*vertex] + st[2*vertex + 1];
    }
    
    int query(int left, int right) {
        return query(1,0,n-1,left,right);
    }

    int query(int vertex, int L, int R, int i, int j) {
        if (i > R || j < L) return 0;
        if (L >= i && R <= j) return st[vertex];
        
        int mitad = (L + R) / 2;
        return max(query(2*vertex, L, mitad, i, j), query(2*vertex+1, mitad+1, R, i, j));
    }

};